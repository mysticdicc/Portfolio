@inject DevProjectAPI DevAPI

@page "/devprojects"

<AuthorizeView>
    <Authorized>
        <div style="padding-bottom: 1rem; display: flex;">
            <RadzenButton Icon="add" Click="@ClickNew" style="margin-right: 0; margin-left: auto;" />
        </div>

        <div hidden=@newPostFormHidden>
            <RadzenCard Style="margin-bottom: 2rem;">
                <RadzenStack Orientation="Orientation.Vertical">
                    <RadzenFormField Text="Title">
                        <RadzenTextBox @bind-Value="@newTitle" />
                    </RadzenFormField>
                    <RadzenFormField Text="Body">
                        <RadzenTextArea @bind-Value="@newBody" Style="height: 10rem;" />
                    </RadzenFormField>
                    <RadzenStack Orientation="Orientation.Horizontal">
                        @foreach (string base64img in newPictures) {
                            <img src=@base64img style="width: 8rem; height: 8rem; border-style: solid; border-color: deeppink; border-width: 1px; box-shadow: deeppink 5px 5px;"/>
                        }
                        <div style="width: 8rem; height: 8rem; border-style: dashed; border-color: grey; border-width: 1px; position: relative; display: flex; justify-content: center; align-content: center;">
                            <label for="pictureupload">
                                <RadzenIcon Icon="add" Style="width: 100%; height: 100%;"/>
                            </label>
                            <InputFile id="pictureupload" style="width: 0%; height: 0%; overflow: hidden;" onchange="@UploadPicture" accept=".png, .jpg, .jpeg" />
                        </div>
                    </RadzenStack>
                    <RadzenButton Click="@OnClickSubmit">
                        Submit
                    </RadzenButton>
                </RadzenStack>
            </RadzenCard>
        </div>
    </Authorized>
</AuthorizeView>


@if (null != posts)
{
    <RadzenStack>
        @foreach (var post in posts)
        {
            <RadzenCard Style="padding: 2rem; background: rgba(50, 50, 50, 0.5)">
                <RadzenStack>

                    <AuthorizeView>
                        <Authorized>
                            <RadzenRow>
                                <RadzenButton Icon="delete" Click="@(() => ClickDelete(post.ID))" />
                                <RadzenButton Icon="edit" Click="@(() => ClickEdit(post.ID))" />
                                <RadzenText Style="margin-right: 0; margin-left: auto;">@post.ID.ToString()</RadzenText>
                                <RadzenText Style="margin-right: 0; margin-left: 0;">@post.LastSubmit.ToString();</RadzenText>
                            </RadzenRow>
                        </Authorized>
                    </AuthorizeView>

                    <div hidden="@editPostHiddenDict[post.ID]">
                        <AuthorizeView>
                            <Authorized>
                                <RadzenStack Orientation="Orientation.Vertical">
                                    <RadzenFormField Text="Title">
                                        <RadzenTextBox @bind-Value="@post.Title" Style="width: 100%;" />
                                    </RadzenFormField>
                                    <RadzenFormField Text="Body">
                                        <RadzenTextArea @bind-Value="@post.Body" Style="height: 10rem;" />
                                    </RadzenFormField>
                                    <RadzenStack Orientation="Orientation.Horizontal">

                                        @if (post.Base64Images.Count != 0)
                                        {
                                            foreach (string base64img in post.Base64Images)
                                            {
                                                <div style="width: 8rem; height: 8rem; position: relative;">
                                                    <img src=@base64img style="width: 8rem; height: 8rem; border-style: solid; border-color: deeppink; border-width: 1px; box-shadow: deeppink 5px 5px;" />
                                                    <RadzenButton Icon="delete" Style="position: absolute; top: 0; right: 0;" Size="ButtonSize.ExtraSmall" Click="@(() => DeleteImage(post, base64img))" />
                                                </div>
                                            }
                                        }

                                        <div style="width: 8rem; height: 8rem; border-style: dashed; border-color: grey; border-width: 1px; position: relative; display: flex; justify-content: center; align-content: center;">
                                            <label for=@post.ID>
                                                <RadzenIcon Icon="add" Style="width: 100%; height: 100%;" />
                                            </label>

                                            <InputFile id=@post.ID style="width: 0%; height: 0%; overflow: hidden;" onchange="@(args => UploadPictureExisting(args, post.ID))" accept=".png, .jpg, .jpeg" />
                                        </div>
                                    </RadzenStack>
                                </RadzenStack>
                            </Authorized>
                        </AuthorizeView>
                    </div>

                    <div hidden="@(!editPostHiddenDict[post.ID])">
                        <RadzenRow>
                            <RadzenText TextStyle="TextStyle.H3">@post.Title</RadzenText>
                        </RadzenRow>
                        <RadzenRow>
                            <RadzenMarkdown TextStyle="TextStyle.H6">@post.Body</RadzenMarkdown>
                        </RadzenRow>

                        @if (post.Base64Images.Count != 0)
                        {
                            <RadzenCarousel style="max-height: 33vh; width: 100%; padding-top: 1rem; padding-bottom: 1rem;">
                                <Items>
                                    @foreach (string base64img in post.Base64Images)
                                    {
                                        <RadzenCarouselItem style="max-height: 33vh">
                                            <img src=@base64img style="max-width: 75%; max-height: 30vh; height: auto; width: auto; border-style: solid; border-color: deeppink; border-width: 1px; box-shadow: deeppink 5px 5px;"/>
                                        </RadzenCarouselItem>
                                    }
                                </Items>
                            </RadzenCarousel>
                        }
                    </div>

                    <AuthorizeView>
                        <Authorized>
                            <div hidden="@editPostHiddenDict[post.ID]">
                                <RadzenButton Click="@(() => ClickSave(post.ID))">
                                    Save
                                </RadzenButton>
                            </div>
                        </Authorized>
                    </AuthorizeView>

                </RadzenStack>
            </RadzenCard>
        }
    </RadzenStack>
} 
else
{
    <div style="justify-content: center; width: 100%; display: flex;">
        <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    </div>
}

@code {
    bool newPostFormHidden = true;
    List<DevProjectPost>? posts;
    Dictionary<Guid, bool> editPostHiddenDict = new Dictionary<Guid, bool>();

    string? newTitle;
    string? newBody;
    List<string> newPictures = new List<string>();

    async protected override Task OnInitializedAsync()
    {
        await Refresh();
        await base.OnInitializedAsync();
    }

    async Task Refresh() {
        posts = await DevAPI.GetAll();

        editPostHiddenDict = new Dictionary<Guid, bool>();
        foreach(DevProjectPost post in posts) 
        {
            editPostHiddenDict.Add(post.ID, true);
        }

        StateHasChanged();
    }

    async void OnClickSubmit()
    {
        if (null != newTitle && null != newBody)
        {
            DevProjectPost newPost = new DevProjectPost
                {
                    Title = newTitle,
                    Body = newBody,
                    LastSubmit = DateTime.Now,
                    Base64Images = new List<string>()
                };

            if (newPictures.Count != 0) 
            {
                newPost.Base64Images = newPictures;
            }

            await DevAPI.AddPost(newPost);
            newTitle = null;
            newBody = null;
            newPictures = new List<string>();
            newPostFormHidden = true;
            await Refresh();
        }
    }

    void ClickNew()
    {
        newPostFormHidden = !newPostFormHidden;
        StateHasChanged();
    }

    async void ClickDelete(Guid guid) 
    {
        await DevAPI.DeletePost(guid);
        await Refresh();
    }

    async void UploadPicture(InputFileChangeEventArgs eventArgs) 
    {
        using var memoryStream = new MemoryStream();
        await eventArgs.File.OpenReadStream(10000000).CopyToAsync(memoryStream);
        var bytes = memoryStream.ToArray();
        var base64 = Convert.ToBase64String(bytes);
        newPictures.Add($"data:{eventArgs.File.ContentType};base64,{base64}");
        StateHasChanged();
    }

    async void UploadPictureExisting(InputFileChangeEventArgs eventArgs, Guid guid) 
    {
        using var memoryStream = new MemoryStream();
        await eventArgs.File.OpenReadStream(10000000).CopyToAsync(memoryStream);
        var bytes = memoryStream.ToArray();
        var base64 = Convert.ToBase64String(bytes);

        if (posts != null) {
            DevProjectPost? post = posts.Where(x => x.ID == guid).FirstOrDefault();

            if (null != post) 
            {
                if (null == post.Base64Images)
                {
                    post.Base64Images = new List<string>();
                }

                post.Base64Images.Add($"data:{eventArgs.File.ContentType};base64,{base64}");
                StateHasChanged();
            }
        }
    }

    void ClickEdit(Guid guid) 
    {
        if (editPostHiddenDict[guid]) 
        {
            editPostHiddenDict[guid] = false;
        } 
        else 
        {
            editPostHiddenDict[guid] = true;
        }
    }

    async void ClickSave(Guid guid) 
    {
        if (null != posts) 
        {
            DevProjectPost? post = posts.Where(x => x.ID == guid).FirstOrDefault();

            if (null != post) 
            {
                await DevAPI.UpdatePost(post);
                await Refresh();
            }
        }
    }

    void DeleteImage(DevProjectPost post, string base64) 
    {
        post.Base64Images.Remove(base64);
    }
}