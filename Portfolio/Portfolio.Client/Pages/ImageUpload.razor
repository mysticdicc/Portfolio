@inject ImageAPI ImageAPI
@page "/imageupload"


<div style="width: 8rem; height: 8rem; border-style: dashed; border-color: grey; border-width: 1px; position: relative; display: flex; justify-content: center; align-content: center;">
    <label for="upload">
        <RadzenIcon Icon="add" Style="width: 100%; height: 100%;" />
    </label>

    <InputFile id="upload" style="width: 0%; height: 0%; overflow: hidden;" onchange="@(args => UploadPicture(args))" accept=".png, .jpg, .jpeg" />
</div>

@foreach (var image in images) {
    <div style="width: 100%; height: fit-content;">
        <img src="@image.RemotePath" style="height: 10rem; width: 10rem;"/>
    </div>
}

@code {
    List<Image> images = [];

    protected override async Task OnInitializedAsync()
    {
        images = await ImageAPI.GetAll();
        await base.OnInitializedAsync();
    }

    async void UploadPicture(InputFileChangeEventArgs eventArgs)
    {
        var name = eventArgs.File.Name.Split('.')[0];
        var ext = eventArgs.File.Name.Split('.')[1];
        var image = new Image(name, ext);
        image.Base64String = await Image.ConvertToBase64(eventArgs.File.OpenReadStream(10000000));

        await ImageAPI.AddNew(image);
        await OnInitializedAsync();
        StateHasChanged();
    }
}
