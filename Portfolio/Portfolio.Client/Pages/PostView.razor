@using System.Text.RegularExpressions

@inject DevProjectAPI DevAPI
@inject ItProjectAPI ItAPI
@inject BlogPostAPI BlogAPI
@inject NavigationManager NavManager
@inject IJSRuntime JS

@page "/posts/{type}"
<PageTitle>Posts - @type</PageTitle>

<AuthorizeView>
    <Authorized>
        <div style="padding-bottom: 1rem; display: flex;">
            <RadzenButton Icon="add" Click="@ClickNew" style="margin-right: 0; margin-left: auto;" />
        </div>

        <div hidden=@newPostFormHidden>
            <RadzenCard Style="margin-bottom: 2rem;">
                <RadzenStack Orientation="Orientation.Vertical">
                    <RadzenFormField Text="Title">
                        <RadzenTextBox @bind-Value="@newTitle" />
                    </RadzenFormField>
                    <RadzenFormField Text="Body">
                        <RadzenTextArea @bind-Value="@newBody" Style="height: 10rem;" />
                    </RadzenFormField>
                    <RadzenStack Orientation="Orientation.Horizontal">
                        @foreach (var img in newPictures)
                        {
                            <img src=@img.RemotePath style="width: 8rem; height: 8rem; border-style: solid; border-color: deeppink; border-width: 1px; box-shadow: deeppink 5px 5px;" />
                        }
                        <div style="width: 8rem; height: 8rem; border-style: dashed; border-color: grey; border-width: 1px; position: relative; display: flex; justify-content: center; align-content: center;">
                            <label for="pictureupload">
                                <RadzenIcon Icon="add" Style="width: 100%; height: 100%;" />
                            </label>
                            <InputFile id="pictureupload" style="width: 0%; height: 0%; overflow: hidden;" onchange="@UploadPicture" accept=".png, .jpg, .jpeg" />
                        </div>
                    </RadzenStack>
                    <RadzenButton Click="@OnClickSubmit">
                        Submit
                    </RadzenButton>
                </RadzenStack>
            </RadzenCard>
        </div>
    </Authorized>
</AuthorizeView>


@if (null != posts)
{
    <RadzenStack>
        @foreach (IWebsitePost post in posts.OrderByDescending(x => x.LastSubmit))
        {
            <RadzenCard Style="padding: 2rem; background: rgba(50, 50, 50, 0.5); min-width: 50vw;">
                <RadzenStack>

                    <AuthorizeView>
                        <Authorized>
                            <RadzenRow>
                                <RadzenButton Icon="delete" Click="@(() => ClickDelete(post.ID))" />
                                <RadzenButton Icon="edit" Click="@(() => ClickEdit(post.ID))" />
                                <RadzenText Style="margin-right: 0; margin-left: auto;">@post.ID.ToString()</RadzenText>
                                <RadzenText Style="margin-right: 0; margin-left: 0;">@post.LastSubmit.ToString();</RadzenText>
                            </RadzenRow>
                        </Authorized>
                    </AuthorizeView>

                    <div hidden="@editPostHiddenDict[post.ID]">
                        <AuthorizeView>
                            <Authorized>
                                <RadzenStack Orientation="Orientation.Vertical">
                                    <RadzenFormField Text="Title">
                                        <RadzenTextBox @bind-Value="@post.Title" Style="width: 100%;" />
                                    </RadzenFormField>
                                    <RadzenFormField Text="Body">
                                        <RadzenTextArea @bind-Value="@post.Body" Style="height: 10rem;" />
                                    </RadzenFormField>
                                    <RadzenStack Orientation="Orientation.Horizontal">

                                        @if (post.Images.Count != 0)
                                        {
                                            foreach (var img in post.Images)
                                            {
                                                <div style="width: 8rem; height: 8rem; position: relative;">
                                                    <img src=@img.RemotePath style="width: 8rem; height: 8rem; border-style: solid; border-color: deeppink; border-width: 1px; box-shadow: deeppink 5px 5px;" />
                                                    <RadzenButton Icon="delete" Style="position: absolute; top: 0; right: 0;" Size="ButtonSize.ExtraSmall" Click="@(() => DeleteImage(post, img))" />
                                                </div>
                                            }
                                        }

                                        <div style="width: 8rem; height: 8rem; border-style: dashed; border-color: grey; border-width: 1px; position: relative; display: flex; justify-content: center; align-content: center;">
                                            <label for=@post.ID>
                                                <RadzenIcon Icon="add" Style="width: 100%; height: 100%;" />
                                            </label>

                                            <InputFile id=@post.ID style="width: 0%; height: 0%; overflow: hidden;" onchange="@(args => UploadPictureExisting(args, post.ID))" accept=".png, .jpg, .jpeg" />
                                        </div>
                                    </RadzenStack>
                                </RadzenStack>
                            </Authorized>
                        </AuthorizeView>
                    </div>

                    <div hidden="@(!editPostHiddenDict[post.ID])">
                        <RadzenRow>
                            <RadzenText TextStyle="TextStyle.H3">@post.Title</RadzenText>
                        </RadzenRow>
                        <RadzenRow>
                            <RadzenMarkdown TextStyle="TextStyle.H6">@SplitPostBody(post.Body)</RadzenMarkdown>
                        </RadzenRow>
                        <RadzenRow Style="display: flex; flex-direction: row;">
                            <RadzenButton Icon="arrow_forward" Click="(() => OpenPost(post.ID.ToString()))" Style="margin-left: auto; margin-right: 0;" Text="Read More"/>
                        </RadzenRow>
                    </div>

                    <AuthorizeView>
                        <Authorized>
                            <div hidden="@editPostHiddenDict[post.ID]">
                                <RadzenButton Click="@(() => ClickSave(post.ID))">
                                    Save
                                </RadzenButton>
                            </div>
                        </Authorized>
                    </AuthorizeView>

                </RadzenStack>
            </RadzenCard>
        }
    </RadzenStack>
}
else
{
    <div style="justify-content: center; width: 100%; display: flex;">
        <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    </div>
}


@code {
    [Parameter]
    required public string type { get; set; }

    async Task<List<IWebsitePost>> GetAll() {
        Console.WriteLine($"Fetching {type} posts");
        var posts = new List<IWebsitePost>();

        try 
        {
            switch (type)
            {
                case "blog":
                    var blog = await BlogAPI.GetAll();
                    posts.AddRange(blog);
                    break;
                case "dev":
                    var dev = await DevAPI.GetAll();
                    posts.AddRange(dev);
                    break;
                case "it":
                    var it = await ItAPI.GetAll();
                    posts.AddRange(it);
                    break;
            }
        } 
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

        return posts;
    }

    async Task AddPost(string title, string body, List<Image>? images) {
        switch (type)
        {
            case "blog":
                BlogPost blogPost = new BlogPost(title, body);

                if (newPictures.Count != 0)
                {
                    blogPost.Images = newPictures;
                }

                await BlogAPI.AddPost(blogPost);
                break;

            case "dev":
                DevProjectPost devPost = new DevProjectPost(title, body);

                if (newPictures.Count != 0)
                {
                    devPost.Images = newPictures;
                }

                await DevAPI.AddPost(devPost);
                break;

            case "it":
                ItProjectPost itPost = new ItProjectPost(title, body);

                if (newPictures.Count != 0)
                {
                    itPost.Images = newPictures;
                }

                await ItAPI.AddPost(itPost);
                break;
        }
    }

    async Task UpdatePost(IWebsitePost post) {
        switch (type)
        {
            case "blog":
                await BlogAPI.UpdatePost((BlogPost)post);
                break;
            case "dev":
                await DevAPI.UpdatePost((DevProjectPost)post);
                break;
            case "it":
                await ItAPI.UpdatePost((ItProjectPost)post);
                break;
        }
    }

    async Task DeletePost(Guid id) {
        switch (type) {
            case "blog":
                await BlogAPI.DeletePost(id);
                break;
            case "dev":
                await DevAPI.DeletePost(id);
                break;
            case "it":
                await ItAPI.DeletePost(id);
                break;
        }
    }

    bool newPostFormHidden = true;
    List<IWebsitePost>? posts;
    Dictionary<Guid, bool> editPostHiddenDict = new Dictionary<Guid, bool>();

    string? newTitle;
    string? newBody;
    List<Image> newPictures = [];

    async protected override Task OnParametersSetAsync()
    {
        await Refresh();
        await base.OnParametersSetAsync();
        StateHasChanged();
    }

    async Task Refresh()
    {
        posts = null;

        try 
        {
            posts = await GetAll();
        } 
        catch 
        {
            Console.WriteLine("Empty list generated as no posts");
            posts = new List<IWebsitePost>();
        }

        editPostHiddenDict = new Dictionary<Guid, bool>();

        foreach (IWebsitePost post in posts)
        {
            editPostHiddenDict.Add(post.ID, true);
        }

        StateHasChanged();
    }

    async void OnClickSubmit()
    {
        if (null != newTitle && null != newBody)
        {
            await AddPost(newTitle, newBody, newPictures);

            newTitle = null;
            newBody = null;
            newPictures = [];
            newPostFormHidden = true;
            await Refresh();
        }
    }

    void ClickNew()
    {
        newPostFormHidden = !newPostFormHidden;
        StateHasChanged();
    }

    async void ClickDelete(Guid guid)
    {
        await DeletePost(guid);
        await Refresh();
    }

    async void UploadPicture(InputFileChangeEventArgs eventArgs)
    {
        var name = eventArgs.File.Name.Split('.')[0];
        var ext = eventArgs.File.Name.Split('.')[1];
        var image = new Image(name, ext);
        image.Base64String = await Image.ConvertToBase64(eventArgs.File.OpenReadStream(10000000));

        newPictures.Add(image);
        StateHasChanged();
    }

    async void UploadPictureExisting(InputFileChangeEventArgs eventArgs, Guid guid)
    {
        var name = eventArgs.File.Name.Split('.')[0];
        var ext = eventArgs.File.Name.Split('.')[1];
        var image = new Image(name, ext);
        image.Base64String = await Image.ConvertToBase64(eventArgs.File.OpenReadStream(10000000));

        if (posts != null)
        {
            IWebsitePost? post = posts.Where(x => x.ID == guid).FirstOrDefault();

            if (null != post)
            {
                post.Images.Add(image);
                StateHasChanged();
            }
        }
    }

    void ClickEdit(Guid guid)
    {
        if (editPostHiddenDict[guid])
        {
            editPostHiddenDict[guid] = false;
        }
        else
        {
            editPostHiddenDict[guid] = true;
        }
    }

    async void ClickSave(Guid guid)
    {
        if (null != posts)
        {
            IWebsitePost? post = posts.Where(x => x.ID == guid).FirstOrDefault();

            if (null != post)
            {
                await UpdatePost(post);
                await Refresh();
            }
        }
    }

    void DeleteImage(IWebsitePost post, Image image)
    {
        post.Images.Remove(image);
    }

    void OpenPost(string guid) 
    {
        NavManager.NavigateTo($"/posts/{type}/{guid}");
    }

    string SplitPostBody(string body) 
    {
        string[] words = body.Split(' ');

        if (words.Length > 100)
        {
            return (string.Join(' ', words, 0, 100) + "...");
        }
        else
        {
            return body;
        }
    }
}
