@inject DevProjectAPI DevAPI
@inject ItProjectAPI ItAPI
@inject BlogPostAPI BlogAPI
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime

@page "/posts/{type}/{guid}"
<PageTitle>Post - @guid</PageTitle>

<RadzenCard Style="padding: 2rem; background: rgba(50, 50, 50, 0.5); min-width: 50vw; padding-bottom: 4rem;">
    @if (null != post)
    {
        <RadzenStack>
            <RadzenRow>
                <RadzenText TextStyle="TextStyle.H3">@post.Title</RadzenText>
            </RadzenRow>
            <RadzenRow>
                <RadzenMarkdown TextStyle="TextStyle.H6">@post.Body</RadzenMarkdown>
            </RadzenRow>

            @if (post.Images.Count != 0)
            {
                <RadzenCarousel style="max-height: 33vh; width: 100%; padding-top: 1rem; padding-bottom: 1rem;">
                    <Items>
                        @foreach (var img in post.Images)
                        {
                            <RadzenCarouselItem style="max-height: 33vh; justify-content: center; align-content: center;">
                                <div style="position: relative; max-width: 75%; max-height: 30vh; height: auto; width: auto; overflow-y: clip;">
                                    <RadzenIcon Icon="open_in_new" onclick="@(() => OpenImage(img.RemotePath))" Style="position: absolute; top: 1rem; right: 2rem;" class="icon_button" />
                                    <img src=@img.RemotePath style="max-height: 33vh; max-width: 99%; height: auto; width: auto; border-style: solid; border-color: deeppink; border-width: 1px; box-shadow: deeppink 5px 5px;" />
                                </div>
                            </RadzenCarouselItem>
                        }
                    </Items>
                </RadzenCarousel>
            }
        </RadzenStack>
    }
</RadzenCard>

@code {
    [Parameter] required public string type { get; set; }
    [Parameter] required public string guid { get; set; }

    IWebsitePost? post;

    async protected override Task OnParametersSetAsync()
    {
        switch (type)
        {
            case "blog":
                post = await BlogAPI.GetById(guid);
                break;
            case "dev":
                post = await DevAPI.GetById(guid);
                break;
            case "it":
                post = await ItAPI.GetById(guid);
                break;
        }
        await base.OnParametersSetAsync();
        StateHasChanged();
    }

    async Task OpenImage(string remotePath)
    {
        await JSRuntime.InvokeAsync<object>("open", remotePath, "_blank");
    }
}
